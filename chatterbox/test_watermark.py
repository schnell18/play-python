import unittest

import librosa
import perth


class TestWatermark(unittest.TestCase):
    def test_watermark_should_exist(self):
        """This test verifies the watermark can be detected from the audio file
        generated by chatterbox-tts model.
        """

        audio_path = "thesis-abstract-justin.wav"
        # Load the watermarked audio
        watermarked_audio, sr = librosa.load(audio_path, sr=None)

        # Initialize watermarker (same as used for embedding)
        watermarker = perth.PerthImplicitWatermarker()

        # Extract watermark
        watermark = watermarker.get_watermark(watermarked_audio, sample_rate=sr)
        print(f"Extracted watermark: {watermark}")
        # Output: 0.0 (no watermark) or 1.0 (watermarked)
        self.assertEqual(watermark, 1.0)

    def test_watermark_should_not_exist(self):
        """This test verifies ordinary audio file is free of chatterbox watermark."""

        audio_path = "justin.wav"
        # Load the watermarked audio
        watermarked_audio, sr = librosa.load(audio_path, sr=None)

        # Initialize watermarker (same as used for embedding)
        watermarker = perth.PerthImplicitWatermarker()

        # Extract watermark
        watermark = watermarker.get_watermark(watermarked_audio, sample_rate=sr)
        print(f"Extracted watermark: {watermark}")
        # Output: 0.0 (no watermark) or 1.0 (watermarked)
        self.assertEqual(watermark, 0.0)
